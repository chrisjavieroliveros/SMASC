/* -- Variables / Definition -- */
$colors: (
  berry: #e54b4b,
  proxima: #345995,
  lemon: #eac435,
  ruby: rgb(240, 44, 44),
  olive: #8cb369,
  white: #ffffff,
  coal: #646464,
  black: #222222
);

/* -- Functions -- */
@function getColor($name) {
  @return map-get($colors, $name);
}

@function colorOpacity($color, $percentage) {
  $opacity: $percentage / 100;
  @return rgba($color, $opacity);
}

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

/* Color Classes Generated from Color Functions */
@each $color, $value in $colors {

  .bg-#{$color} {
    background-color: #{$value};
  }

  $tintValue: 500;
  @for $x from 1 through 4 {
    $tintValue: $tintValue - 100;
    .bg-#{$color}-#{$tintValue} {
      background-color: tint(getColor($color), 20 * $x);
    }
  }

  $shadeValue: 500;
  @for $x from 1 through 4 {
    $shadeValue: $shadeValue + 100;
    .bg-#{$color}-#{$shadeValue} {
      background-color: shade(getColor($color), 20 * $x);
    }
  }

  .text-#{$color} {
    color: #{$value};
  }

  $tintValue: 500;
  @for $x from 1 through 4 {
    $tintValue: $tintValue - 100;
    .text-#{$color}-#{$tintValue} {
      color: tint(getColor($color), 20 * $x);
    }
  }

  $shadeValue: 500;
  @for $x from 1 through 4 {
    $shadeValue: $shadeValue + 100;
    .text-#{$color}-#{$shadeValue} {
      color: shade(getColor($color), 20 * $x);
    }
  }
  
}
